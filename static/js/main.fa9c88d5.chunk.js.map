{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","useState","quotes","setQuotes","currentQuote","setCurrentQuote","currentColor","setCurrentColor","document","body","style","backgroundColor","useEffect","fetch","then","response","json","data","randomQuote","Math","floor","random","length","color","id","className","text","author","borderColor","onClick","window","open","href","colors","randomColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gOAgEeA,MA5Df,SAAaC,GACX,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAwCJ,mBAAS,WAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAsBA,OArBAC,SAASC,KAAKC,MAAMC,gBAAkBL,EAEtCM,qBAAU,WACPC,MAAM,+BACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAClDnB,EAAUc,GACVZ,EAAgBY,EAAKC,SAEzB,IAYA,sBAAKR,MAAO,CAACa,MAAOjB,GAAekB,GAAG,YAAYC,UAAU,cAA5D,UACE,sBAAKA,UAAU,WAAf,UACsB,IAAlBvB,EAAOoB,OACP,oBAAIE,GAAG,SACP,qBAAIA,GAAG,OAAP,UAAc,mBAAGC,UAAU,sBAA3B,IAAqDrB,EAAasB,QAE3C,OAAxBtB,EAAauB,OACZ,mBAAGH,GAAG,SAAN,wBACA,oBAAGA,GAAG,SAAN,eAAkBpB,EAAauB,OAA/B,UAGJ,sBAAKF,UAAU,SAAf,UACE,iCACE,wBAAQD,GAAG,WACTd,MAAO,CAAEC,gBAAiBL,EAAcsB,YAAatB,GADvD,SAEE,mBAAGmB,UAAU,4BACf,yBAAQf,MAAO,CAAEC,gBAAiBL,EAAcsB,YAAatB,GAC3DuB,QAAS,WACPC,OAAOC,KAAK,yBAFhB,UAGE,mBAAGP,GAAG,cAAcQ,KAAK,qCACzB,mBAAGP,UAAU,6BAGjB,+BACE,wBAAQD,GAAG,YAAYd,MAAO,CAACC,gBAAiBL,EAAcsB,YAAatB,GACzEuB,QAnCW,WACnB,IAAMI,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAC9C,UAAW,UAAW,UAAW,UAAW,WACtDf,EAAcC,KAAKC,MAAMD,KAAKE,SAAWnB,EAAOoB,QAChDY,EAAcf,KAAKC,MAAMD,KAAKE,SAAWY,EAAOX,QACpDjB,EAAgBH,EAAOgB,IACvBX,EAAgB0B,EAAOC,KA4BjB,gCC1CKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASsC,eAAe,SAM1BX,K","file":"static/js/main.fa9c88d5.chunk.js","sourcesContent":["import './App.css';\nimport { React, useState, useEffect } from 'react';\n\n{/* */}\nfunction App(props) {\n  const [quotes, setQuotes] = useState([]);\n  const [currentQuote, setCurrentQuote] = useState('');\n  const [currentColor, setCurrentColor] = useState('#191970');\n  document.body.style.backgroundColor = currentColor;\n  \n  useEffect(() => {\n     fetch(\"https://type.fit/api/quotes\")\n      .then((response) => response.json())\n      .then((data) => {\n        let randomQuote = Math.floor(Math.random() * data.length);\n        setQuotes(data);\n        setCurrentQuote(data[randomQuote]);\n      });\n  },[]);\n  \n  let handleNewQuote = () => {\n    const colors = ['#6A5ACD', '#6495ED', '#800080', '#4B0082', '#48D1CC', \n                  '#EE82EE', '#1E90FF', '#FF69B4', '#FFB6C1', '#66CDAA'];\n    let randomQuote = Math.floor(Math.random() * quotes.length);\n    let randomColor = Math.floor(Math.random() * colors.length);\n    setCurrentQuote(quotes[randomQuote]);\n    setCurrentColor(colors[randomColor]);\n  }\n  \n  return(\n    <div style={{color: currentColor}} id=\"quote-box\" className='quoteboxDiv'>\n      <div className='quoteDiv'>\n        {(quotes.length === 0) ? \n          <h1 id=\"text\"></h1> :\n          <h2 id=\"text\"><i className=\"fas fa-quote-left\"></i> {currentQuote.text}</h2>}\n\n       {(currentQuote.author === null) ?  \n          <p id=\"author\">- Unknown </p> : \n          <p id=\"author\">- {currentQuote.author} </p>}\n      </div>\n      \n      <div className='btnDiv'>\n        <span>\n          <button id=\"fb-quote\" \n            style={{ backgroundColor: currentColor, borderColor: currentColor }}>\n            <i className=\"fab fa-facebook-f btn\"></i></button>\n          <button style={{ backgroundColor: currentColor, borderColor: currentColor }}\n            onClick={() => {\n              window.open('https://twitter.com/')}}>\n            <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\"/>\n            <i className=\"fab fa-twitter btn\"></i>\n           </button>\n        </span>\n        <span>\n          <button id=\"new-quote\" style={{backgroundColor: currentColor, borderColor: currentColor}}\n            onClick={handleNewQuote}>\n              New Quote\n          </button>\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}